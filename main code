from lifestore_file import lifestore_searches, lifestore_sales, lifestore_products

usuario= "Humberto"
contraseña= "Mora"
tries=0; Acces= False
while not Acces:
    tries+=1

    if tries==4:
        exit()
    if input('Usuario: ')== usuario and input ('contraseña: ')==contraseña:
         Acces=True
         print('Acceso Concedido')
    else:
         print(f'Tienes {3- tries} intentos restantes')     

      

#VENTAS#

soldproduct=[]; timesold=[]

soldproduct=[sale[1] for sale in lifestore_sales]

for sale in lifestore_products: 
    nested=[]
    timesold.append(nested)
    for k in range(1):
      nested.append(sale[0])
      nested.append(sale[1])
      nested.append(soldproduct.count(sale[0]))
      nested.append(sale[-2])

def Sort(timesold):
  timesold.sort(key=lambda x: x[2])
  return timesold

timesold= Sort(timesold)

print("\n PRODUCTOS MAS VENDIDOS")
for i in [-1,-2,-3,-4,-5]:
  print(F'ID: {timesold [i][0]}\t NAME: {timesold[i][1]}\t SALES: {timesold[i][2]}')
  
#VENTAS POR CATEGORIA#

categories= []
processors=[]; gpus=[]; motherboards=[]; drives=[]; usb=[]; screens=[];speakers=[]; headphones=[]

categories=[item[-2] for item in lifestore_products]

categories= list(dict.fromkeys(categories))

for item in timesold:
    if categories[0] in item:
      processors.append(item[:3])
    elif categories[1] in item:
      gpus.append(item[:3])
    elif categories[2] in item:
      motherboards.append(item[:3])
    elif categories[3] in item:
      drives.append(item[:3])
    elif categories[4] in item:
      usb.append(item[:3])  
    elif categories[5] in item:
      screens.append(item[:3])
    elif categories[6] in item:
      speakers.append(item[:3])
    elif categories[7] in item:
      headphones.append(item[:3])  

print("\n  PROCESADRES MENOS VENDIDODS")
for i in range(5):
    print(F"ID: {processors [i][0]}\t NAME: {processors[i][1]}\t TIMES SOLD: {processors[i][-1]}")    

print("\n  GPUS MENOS VENDIDODS")
for i in range(5):   
    print(F"ID: {gpus [i][0]}\t NAME: {gpus[i][1]}\t TIMES SOLD: {gpus[i][-1]}")   
    
print("\n  MOTHERBOARDS MENOS VENDIDODS")
for i in range(5):
    print(F"ID: {motherboards [i][0]}\t NAME: {motherboards[i][1]}\t TIMES SOLD: {motherboards[i][-1]}")    

print("\n  DRIVES MENOS VENDIDODS")
for i in range(5):   
    print(F"ID: {drives [i][0]}\t NAME: {drives[i][1]}\t TIMES SOLD: {drives[i][-1]}") 

print("\n  USB MENOS VENDIDODS")
for i in range(2):
    print(F"ID: {usb [i][0]}\t NAME: {usb[i][1]}\t TIMES SOLD: {usb[i][-1]}")    

print("\n  SCREENS MENOS VENDIDODS")
for i in range(5):   
    print(F"ID: {screens [i][0]}\t NAME: {screens[i][1]}\t TIMES SOLD: {screens[i][-1]}")   
    
print("\n  SPEAKERS MENOS VENDIDODS")
for i in range(5):
    print(F"ID: {speakers [i][0]}\t NAME: {speakers[i][1]}\t TIMES SOLD: {speakers[i][-1]}")    

print("\n  HEADPHONES MENOS VENDIDODS")
for i in range(5):   
    print(F"ID: {headphones [i][0]}\t NAME: {headphones[i][1]}\t TIMES SOLD: {headphones[i][-1]}") 



#BUSQUEDAS#

searchedproduct=[]; timesearched=[]

searchedproduct=[search[1] for search in lifestore_searches]

for search in lifestore_products: 
  nested=[]
  timesearched.append(nested)
  for k in range(1):
    nested.append(search[0])
    nested.append(search[1])
    nested.append(searchedproduct.count(search[0]))
    nested.append(search[-2])

def Sort(timesearched):
    timesearched.sort(key=lambda x: x[2])
    return timesearched

timesearched=Sort(timesearched)

print("\n PRODUCTOS MAS BUSCADOS")
for i in [-1,-2,-3,-4,-5]:
  print(F'ID: {timesearched [i][0]}\t NAME: {timesearched[i][1]}\t SEARCHES: {timesearched[i][2]}')

  #BUSQUEDAS POR CATEGORIA#

processors2=[]; gpus2=[]; motherboards2=[]; drives2=[]; usb2=[]; screens2=[];speakers2=[]; headphones2=[]

for item in timesearched:
    if categories[0] in item:
      processors2.append(item[:3])
    elif categories[1] in item:
      gpus2.append(item[:3])
    elif categories[2] in item:
      motherboards2.append(item[:3])
    elif categories[3] in item:
      drives2.append(item[:3])
    elif categories[4] in item:
      usb2.append(item[:3])  
    elif categories[5] in item:
      screens2.append(item[:3])
    elif categories[6] in item:
      speakers2.append(item[:3])
    elif categories[7] in item:
      headphones2.append(item[:3])  


print("\n  PROCESSORS MENOS BUSCADOS")
for i in range(9):
    print(F"ID: {processors [i][0]}\t NAME: {processors[i][1]}\t TIMES SEARCHED: {processors[i][-1]}")    

print("\n  GPUS MENOS BUSCADOS")
for i in range(10):   
    print(F"ID: {gpus [i][0]}\t NAME: {gpus[i][1]}\t TIMES SEARCHED: {gpus[i][2]}")   
    
print("\n  MOTHERBOARDS MENOS BUSCADOS")
for i in range(10):
    print(F"ID: {motherboards [i][0]}\t NAME: {motherboards[i][1]}\t TIMES SEARCHED: {motherboards[i][-1]}")    

print("\n  DRIVES MENOS BUSCADOS")
for i in range(10):   
    print(F"ID: {drives [i][0]}\t NAME: {drives[i][1]}\t TIMES SEARCHED: {drives[i][-1]}") 

print("\n  USB MENOS BUSCADOS")
for i in range(2):
    print(F"ID: {usb [i][0]}\t NAME: {usb[i][1]}\t TIMES SEARCHED: {usb[i][-1]}")    

print("\n  SCREENS MENOS BUSCADOS")
for i in range(10):   
    print(F"ID: {screens [i][0]}\t NAME: {screens[i][1]}\t TIMES SEARCHED: {screens[i][-1]}")   
    
print("\n  SPEAKERS MENOS BUSCADOS")
for i in range(10):
    print(F"ID: {speakers [i][0]}\t NAME: {speakers[i][1]}\t TIMES SEARCHED: {speakers[i][-1]}")    

print("\n  HEADPHONES MENOS BUSCADOS")
for i in range(10):   
    print(F"ID: {headphones [i][0]}\t NAME: {headphones[i][1]}\t TIMES SEARCHED: {headphones[i][-1]}") 

#REVIEWS#

tempsum=0; totalscore=[]; averagescore=[]

for product in lifestore_products:
  for review in lifestore_sales:
    if product[0]==review[1]:
      tempsum+= review[2]

  totalscore.append(tempsum)
  tempsum=0

for review in timesold:
  nested=[]
  if review[2]>0:
    averagescore.append(nested)
    for k in range(1):
      nested.append(review[0])
      nested.append(review[1])
      nested.append(review[2])
      nested.append(totalscore[review[0]-1]/review[2])

def Sort(averagescore):
  averagescore.sort(key=lambda x: x[-1])
  return averagescore

averagescore= Sort(averagescore)

print("\n PRODUCTOS CON LA MEJOR CLASIFICACION/ MEJOR VALORADOS")
for i in range(-1,-11,-1):
    print(F'ID: {averagescore [i][0]}\t NAME: {averagescore[i][1]}\t SCORE: {averagescore[i][-1]}\t TIMES REVIEWED:{averagescore[i][2]}')  

print("\n PRODUCTOS CON LA PEOR CLASIFICACION/ PEOR VALORADOS")
for i in range(0,10):
    print(F'ID: {averagescore [i][0]}\t NAME: {averagescore[i][1]}\t SCORE: {averagescore[i][-1]}\t TIMES REVIEWED:{averagescore[i][2]}')  


#VENTAS POR MES#

from datetime import datetime; import calendar
date= [sale[3]for sale in lifestore_sales]
date.sort(key= lambda date: datetime.strptime(date, '%d/%m/%Y'))

month= calendar.month_name[1:]

refundeditem=[]; totalrefunds=0; averageticket=[]
totalsales=0; monthsales= [0]*12; monthprofit= [0]*12

soldproduct= [sale[1] for sale in lifestore_sales]

for i in range(0,len(lifestore_sales)):
  if int(lifestore_sales[i][-1])==0:
    
    totalsales+=lifestore_products[soldproduct[i]][2]

    if "/01/" in date[i]:
      monthprofit[0]+= lifestore_products[soldproduct[i]][2]
      monthsales[0]+=1
    elif "/02/" in date[i]:
      monthprofit[1]+= lifestore_products[soldproduct[i]][2]
      monthsales[1]+=1
    elif "/03/" in date[i]:
      monthprofit[2]+= lifestore_products[soldproduct[i]][2]
      monthsales[2]+=1  
    elif "/04/" in date[i]:
      monthprofit[3]+= lifestore_products[soldproduct[i]][2]
      monthsales[3]+=1
    elif "/05/" in date[i]:
      monthprofit[4]+= lifestore_products[soldproduct[i]][2]
      monthsales[4]+=1   
    elif "/06/" in date[i]:
      monthprofit[5]+= lifestore_products[soldproduct[i]][2]
      monthsales[5]+=1
    elif "/07/" in date[i]:
      monthprofit[6]+= lifestore_products[soldproduct[i]][2]
      monthsales[6]+=1  
    elif "/08/" in date[i]:
      monthprofit[7]+= lifestore_products[soldproduct[i]][2]
      monthsales[7]+=1
    elif "/09/" in date[i]:
      monthprofit[8]+= lifestore_products[soldproduct[i]][2]
      monthsales[8]+=1  
    elif "/10/" in date[i]:
      monthprofit[9]+= lifestore_products[soldproduct[i]][2]
      monthsales[9]+=1  
    elif "/11/" in date[i]:
      monthprofit[10]+= lifestore_products[soldproduct[i]][2]
      monthsales[10]+=1
    elif "/12/" in date[i]:
      monthprofit[11]+= lifestore_products[soldproduct[i]][2]
      monthsales[11]+=1      

  else:
    refundeditem.append(soldproduct[i])
    totalrefunds+=lifestore_products[soldproduct[i]][2]

for i in range(12):
  if monthsales[i]>0:
    averageticket.append(monthprofit[i]/monthsales[i])
  else:
    averageticket.append(0)  

salesxmonth=[list(l) for l in zip(month, monthprofit, monthsales, averageticket)]

def Sort(Salesxmonth):
  salesxmonth.sort(key= lambda x: x[1])
  return salesxmonth
salesxmonth= Sort(salesxmonth)

print("\n MESES MAS RENTABLES")
for i in [-1,-2,-3,-4,-5]:
    print(F'MONTH: {salesxmonth [i][0]}\t PROFIT: {"${:,.2f}".format(salesxmonth[i][1])}\t SALES: {salesxmonth[i][2]}\t AVERAGE:{salesxmonth[i][-1]}')

def Sort(salesxmonth):
  salesxmonth.sort(key= lambda x: x[2])
  return salesxmonth

salesxmonth= Sort(salesxmonth)

print("\n MESES CON LAS MAYORES VENTAS")
for i in [-1,-2,-3,-4,-5]:
    print(F'MONTH: {salesxmonth [i][0]}\t PROFIT: {"${:,.2f}".format(salesxmonth[i][1])}\t SALES: {salesxmonth[i][2]}\t AVERAGE:{salesxmonth[i][-1]}')

def Sort(salesxmonth):
  salesxmonth.sort(key= lambda x: x[-1])
  return salesxmonth

salesxmonth= Sort(salesxmonth)

print("\n HIGHEST AVERAGE TICKET PER MONTH")
for i in [-1,-2,-3,-4,-5]:
    print(F'MONTH: {salesxmonth [i][0]}\t PROFIT: {"${:,.2f}".format(salesxmonth[i][1])}\t SALES: {salesxmonth[i][2]}\t AVERAGE:{salesxmonth[i][-1]}')
